Useless nonterminals

   block_stmt
   expr_list


Terminals which are not used

   SQB_L
   SQB_R
   SQB_PAIR
   PLUSEQ
   MINUSEQ
   TIMESEQ
   DIVIDEQ
   CLASS_NAME
   NOELSE
   SEMICO


Useless rules

   68 block_stmt: BRACE_L stmts BRACE_R

   69 expr_list: /* empty */
   70          | expr_list COMMA expr
   71          | expr


Grammar

    0 $accept: program $end

    1 program: decls EOF

    2 decls: /* empty */
    3      | decls var_decl
    4      | decls fdecl
    5      | decls cdecl

    6 fdecl: typ IDENTIFIER PAREN_L formals_opt PAREN_R BRACE_L var_decls stmts BRACE_R

    7 cdecl: CLASS CLASS_IDENTIFIER BRACE_L class_body BRACE_R SEMI

    8 class_body: var_decls

    9 formals_opt: /* empty */
   10            | formal_list

   11 formal_list: typ IDENTIFIER
   12            | formal_list COMMA typ IDENTIFIER

   13 typ: VOID
   14    | BOOL
   15    | CHAR
   16    | INT
   17    | DOUBLE
   18    | STRING
   19    | CLASS_IDENTIFIER

   20 var_decls: /* empty */
   21          | var_decls var_decl

   22 var_decl: typ IDENTIFIER SEMI

   23 stmts: /* empty */
   24      | stmts stmt

   25 stmt: expr SEMI
   26     | return_stmt SEMI
   27     | break_stmt SEMI
   28     | if_stmt
   29     | while_stmt
   30     | for_stmt

   31 return_stmt: RETURN expr
   32            | RETURN

   33 break_stmt: BREAK

   34 if_stmt: IF PAREN_L expr PAREN_R BRACE_L stmts BRACE_R ELSE BRACE_L stmts BRACE_R
   35        | IF PAREN_L expr PAREN_R BRACE_L stmts BRACE_R

   36 while_stmt: WHILE PAREN_L expr PAREN_R BRACE_L stmts BRACE_R

   37 for_stmt: FOR PAREN_L expr SEMI expr SEMI expr PAREN_R BRACE_L stmts BRACE_R

   38 expr: INT_LITERAL
   39     | STRING_LITERAL
   40     | DOUBLE_LITERAL
   41     | CHAR_LITERAL
   42     | TRUE
   43     | FALSE
   44     | expr PLUS expr
   45     | expr MINUS expr
   46     | expr TIMES expr
   47     | expr DIVIDE expr
   48     | expr MOD expr
   49     | expr EQ expr
   50     | expr NEQ expr
   51     | expr LT expr
   52     | expr LEQ expr
   53     | expr GT expr
   54     | expr GEQ expr
   55     | expr AND expr
   56     | expr OR expr
   57     | NOT expr
   58     | PAREN_L expr PAREN_R
   59     | fq_identifier ASSIGN expr
   60     | IDENTIFIER PAREN_L args_opt PAREN_R
   61     | fq_identifier

   62 fq_identifier: IDENTIFIER
   63              | IDENTIFIER DOT IDENTIFIER

   64 args_opt: /* empty */
   65         | args_list

   66 args_list: expr
   67          | args_list COMMA expr


Terminals, with rules where they appear

$end (0) 0
error (256)
PAREN_L (258) 6 34 35 36 37 58 60
PAREN_R (259) 6 34 35 36 37 58 60
BRACE_L (260) 6 7 34 35 36 37
BRACE_R (261) 6 7 34 35 36 37
SQB_L (262)
SQB_R (263)
SQB_PAIR (264)
DOT (265) 63
SEMI (266) 7 22 25 26 27 37
COMMA (267) 12 67
MOD (268) 48
ASSIGN (269) 59
PLUS (270) 44
MINUS (271) 45
TIMES (272) 46
DIVIDE (273) 47
PLUSEQ (274)
MINUSEQ (275)
TIMESEQ (276)
DIVIDEQ (277)
AND (278) 55
OR (279) 56
NOT (280) 57
EQ (281) 49
NEQ (282) 50
LT (283) 51
LEQ (284) 52
GT (285) 53
GEQ (286) 54
VOID (287) 13
BOOL (288) 14
CHAR (289) 15
INT (290) 16
DOUBLE (291) 17
STRING (292) 18
IF (293) 34 35
ELSE (294) 34
FOR (295) 37
WHILE (296) 36
RETURN (297) 31 32
BREAK (298) 33
CLASS (299) 7
TRUE (300) 42
FALSE (301) 43
IDENTIFIER (302) 6 11 12 22 60 62 63
CLASS_IDENTIFIER (303) 7 19
CLASS_NAME (304)
STRING_LITERAL (305) 39
DOUBLE_LITERAL (306) 40
CHAR_LITERAL (307) 41
INT_LITERAL (308) 38
EOF (309) 1
NOELSE (310)
SEMICO (311)


Nonterminals, with rules where they appear

$accept (57)
    on left: 0
program (58)
    on left: 1, on right: 0
decls (59)
    on left: 2 3 4 5, on right: 1 3 4 5
fdecl (60)
    on left: 6, on right: 4
cdecl (61)
    on left: 7, on right: 5
class_body (62)
    on left: 8, on right: 7
formals_opt (63)
    on left: 9 10, on right: 6
formal_list (64)
    on left: 11 12, on right: 10 12
typ (65)
    on left: 13 14 15 16 17 18 19, on right: 6 11 12 22
var_decls (66)
    on left: 20 21, on right: 6 8 21
var_decl (67)
    on left: 22, on right: 3 21
stmts (68)
    on left: 23 24, on right: 6 24 34 35 36 37
stmt (69)
    on left: 25 26 27 28 29 30, on right: 24
return_stmt (70)
    on left: 31 32, on right: 26
break_stmt (71)
    on left: 33, on right: 27
if_stmt (72)
    on left: 34 35, on right: 28
while_stmt (73)
    on left: 36, on right: 29
for_stmt (74)
    on left: 37, on right: 30
expr (75)
    on left: 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55
    56 57 58 59 60 61, on right: 25 31 34 35 36 37 44 45 46 47 48 49
    50 51 52 53 54 55 56 57 58 59 66 67
fq_identifier (76)
    on left: 62 63, on right: 59 61
args_opt (77)
    on left: 64 65, on right: 60
args_list (78)
    on left: 66 67, on right: 65 67


state 0

    0 $accept: . program $end

    $default  reduce using rule 2 (decls)

    program  go to state 1
    decls    go to state 2


state 1

    0 $accept: program . $end

    $end  shift, and go to state 3


state 2

    1 program: decls . EOF
    3 decls: decls . var_decl
    4      | decls . fdecl
    5      | decls . cdecl

    VOID              shift, and go to state 4
    BOOL              shift, and go to state 5
    CHAR              shift, and go to state 6
    INT               shift, and go to state 7
    DOUBLE            shift, and go to state 8
    STRING            shift, and go to state 9
    CLASS             shift, and go to state 10
    CLASS_IDENTIFIER  shift, and go to state 11
    EOF               shift, and go to state 12

    fdecl     go to state 13
    cdecl     go to state 14
    typ       go to state 15
    var_decl  go to state 16


state 3

    0 $accept: program $end .

    $default  accept


state 4

   13 typ: VOID .

    $default  reduce using rule 13 (typ)


state 5

   14 typ: BOOL .

    $default  reduce using rule 14 (typ)


state 6

   15 typ: CHAR .

    $default  reduce using rule 15 (typ)


state 7

   16 typ: INT .

    $default  reduce using rule 16 (typ)


state 8

   17 typ: DOUBLE .

    $default  reduce using rule 17 (typ)


state 9

   18 typ: STRING .

    $default  reduce using rule 18 (typ)


state 10

    7 cdecl: CLASS . CLASS_IDENTIFIER BRACE_L class_body BRACE_R SEMI

    CLASS_IDENTIFIER  shift, and go to state 17


state 11

   19 typ: CLASS_IDENTIFIER .

    $default  reduce using rule 19 (typ)


state 12

    1 program: decls EOF .

    $default  reduce using rule 1 (program)


state 13

    4 decls: decls fdecl .

    $default  reduce using rule 4 (decls)


state 14

    5 decls: decls cdecl .

    $default  reduce using rule 5 (decls)


state 15

    6 fdecl: typ . IDENTIFIER PAREN_L formals_opt PAREN_R BRACE_L var_decls stmts BRACE_R
   22 var_decl: typ . IDENTIFIER SEMI

    IDENTIFIER  shift, and go to state 18


state 16

    3 decls: decls var_decl .

    $default  reduce using rule 3 (decls)


state 17

    7 cdecl: CLASS CLASS_IDENTIFIER . BRACE_L class_body BRACE_R SEMI

    BRACE_L  shift, and go to state 19


state 18

    6 fdecl: typ IDENTIFIER . PAREN_L formals_opt PAREN_R BRACE_L var_decls stmts BRACE_R
   22 var_decl: typ IDENTIFIER . SEMI

    PAREN_L  shift, and go to state 20
    SEMI     shift, and go to state 21


state 19

    7 cdecl: CLASS CLASS_IDENTIFIER BRACE_L . class_body BRACE_R SEMI

    $default  reduce using rule 20 (var_decls)

    class_body  go to state 22
    var_decls   go to state 23


state 20

    6 fdecl: typ IDENTIFIER PAREN_L . formals_opt PAREN_R BRACE_L var_decls stmts BRACE_R

    VOID              shift, and go to state 4
    BOOL              shift, and go to state 5
    CHAR              shift, and go to state 6
    INT               shift, and go to state 7
    DOUBLE            shift, and go to state 8
    STRING            shift, and go to state 9
    CLASS_IDENTIFIER  shift, and go to state 11

    $default  reduce using rule 9 (formals_opt)

    formals_opt  go to state 24
    formal_list  go to state 25
    typ          go to state 26


state 21

   22 var_decl: typ IDENTIFIER SEMI .

    $default  reduce using rule 22 (var_decl)


state 22

    7 cdecl: CLASS CLASS_IDENTIFIER BRACE_L class_body . BRACE_R SEMI

    BRACE_R  shift, and go to state 27


state 23

    8 class_body: var_decls .
   21 var_decls: var_decls . var_decl

    VOID              shift, and go to state 4
    BOOL              shift, and go to state 5
    CHAR              shift, and go to state 6
    INT               shift, and go to state 7
    DOUBLE            shift, and go to state 8
    STRING            shift, and go to state 9
    CLASS_IDENTIFIER  shift, and go to state 11

    $default  reduce using rule 8 (class_body)

    typ       go to state 28
    var_decl  go to state 29


state 24

    6 fdecl: typ IDENTIFIER PAREN_L formals_opt . PAREN_R BRACE_L var_decls stmts BRACE_R

    PAREN_R  shift, and go to state 30


state 25

   10 formals_opt: formal_list .
   12 formal_list: formal_list . COMMA typ IDENTIFIER

    COMMA  shift, and go to state 31

    $default  reduce using rule 10 (formals_opt)


state 26

   11 formal_list: typ . IDENTIFIER

    IDENTIFIER  shift, and go to state 32


state 27

    7 cdecl: CLASS CLASS_IDENTIFIER BRACE_L class_body BRACE_R . SEMI

    SEMI  shift, and go to state 33


state 28

   22 var_decl: typ . IDENTIFIER SEMI

    IDENTIFIER  shift, and go to state 34


state 29

   21 var_decls: var_decls var_decl .

    $default  reduce using rule 21 (var_decls)


state 30

    6 fdecl: typ IDENTIFIER PAREN_L formals_opt PAREN_R . BRACE_L var_decls stmts BRACE_R

    BRACE_L  shift, and go to state 35


state 31

   12 formal_list: formal_list COMMA . typ IDENTIFIER

    VOID              shift, and go to state 4
    BOOL              shift, and go to state 5
    CHAR              shift, and go to state 6
    INT               shift, and go to state 7
    DOUBLE            shift, and go to state 8
    STRING            shift, and go to state 9
    CLASS_IDENTIFIER  shift, and go to state 11

    typ  go to state 36


state 32

   11 formal_list: typ IDENTIFIER .

    $default  reduce using rule 11 (formal_list)


state 33

    7 cdecl: CLASS CLASS_IDENTIFIER BRACE_L class_body BRACE_R SEMI .

    $default  reduce using rule 7 (cdecl)


state 34

   22 var_decl: typ IDENTIFIER . SEMI

    SEMI  shift, and go to state 21


state 35

    6 fdecl: typ IDENTIFIER PAREN_L formals_opt PAREN_R BRACE_L . var_decls stmts BRACE_R

    $default  reduce using rule 20 (var_decls)

    var_decls  go to state 37


state 36

   12 formal_list: formal_list COMMA typ . IDENTIFIER

    IDENTIFIER  shift, and go to state 38


state 37

    6 fdecl: typ IDENTIFIER PAREN_L formals_opt PAREN_R BRACE_L var_decls . stmts BRACE_R
   21 var_decls: var_decls . var_decl

    VOID              shift, and go to state 4
    BOOL              shift, and go to state 5
    CHAR              shift, and go to state 6
    INT               shift, and go to state 7
    DOUBLE            shift, and go to state 8
    STRING            shift, and go to state 9
    CLASS_IDENTIFIER  shift, and go to state 11

    $default  reduce using rule 23 (stmts)

    typ       go to state 28
    var_decl  go to state 29
    stmts     go to state 39


state 38

   12 formal_list: formal_list COMMA typ IDENTIFIER .

    $default  reduce using rule 12 (formal_list)


state 39

    6 fdecl: typ IDENTIFIER PAREN_L formals_opt PAREN_R BRACE_L var_decls stmts . BRACE_R
   24 stmts: stmts . stmt

    PAREN_L         shift, and go to state 40
    BRACE_R         shift, and go to state 41
    NOT             shift, and go to state 42
    IF              shift, and go to state 43
    FOR             shift, and go to state 44
    WHILE           shift, and go to state 45
    RETURN          shift, and go to state 46
    BREAK           shift, and go to state 47
    TRUE            shift, and go to state 48
    FALSE           shift, and go to state 49
    IDENTIFIER      shift, and go to state 50
    STRING_LITERAL  shift, and go to state 51
    DOUBLE_LITERAL  shift, and go to state 52
    CHAR_LITERAL    shift, and go to state 53
    INT_LITERAL     shift, and go to state 54

    stmt           go to state 55
    return_stmt    go to state 56
    break_stmt     go to state 57
    if_stmt        go to state 58
    while_stmt     go to state 59
    for_stmt       go to state 60
    expr           go to state 61
    fq_identifier  go to state 62


state 40

   58 expr: PAREN_L . expr PAREN_R

    PAREN_L         shift, and go to state 40
    NOT             shift, and go to state 42
    TRUE            shift, and go to state 48
    FALSE           shift, and go to state 49
    IDENTIFIER      shift, and go to state 50
    STRING_LITERAL  shift, and go to state 51
    DOUBLE_LITERAL  shift, and go to state 52
    CHAR_LITERAL    shift, and go to state 53
    INT_LITERAL     shift, and go to state 54

    expr           go to state 63
    fq_identifier  go to state 62


state 41

    6 fdecl: typ IDENTIFIER PAREN_L formals_opt PAREN_R BRACE_L var_decls stmts BRACE_R .

    $default  reduce using rule 6 (fdecl)


state 42

   57 expr: NOT . expr

    PAREN_L         shift, and go to state 40
    NOT             shift, and go to state 42
    TRUE            shift, and go to state 48
    FALSE           shift, and go to state 49
    IDENTIFIER      shift, and go to state 50
    STRING_LITERAL  shift, and go to state 51
    DOUBLE_LITERAL  shift, and go to state 52
    CHAR_LITERAL    shift, and go to state 53
    INT_LITERAL     shift, and go to state 54

    expr           go to state 64
    fq_identifier  go to state 62


state 43

   34 if_stmt: IF . PAREN_L expr PAREN_R BRACE_L stmts BRACE_R ELSE BRACE_L stmts BRACE_R
   35        | IF . PAREN_L expr PAREN_R BRACE_L stmts BRACE_R

    PAREN_L  shift, and go to state 65


state 44

   37 for_stmt: FOR . PAREN_L expr SEMI expr SEMI expr PAREN_R BRACE_L stmts BRACE_R

    PAREN_L  shift, and go to state 66


state 45

   36 while_stmt: WHILE . PAREN_L expr PAREN_R BRACE_L stmts BRACE_R

    PAREN_L  shift, and go to state 67


state 46

   31 return_stmt: RETURN . expr
   32            | RETURN .

    PAREN_L         shift, and go to state 40
    NOT             shift, and go to state 42
    TRUE            shift, and go to state 48
    FALSE           shift, and go to state 49
    IDENTIFIER      shift, and go to state 50
    STRING_LITERAL  shift, and go to state 51
    DOUBLE_LITERAL  shift, and go to state 52
    CHAR_LITERAL    shift, and go to state 53
    INT_LITERAL     shift, and go to state 54

    $default  reduce using rule 32 (return_stmt)

    expr           go to state 68
    fq_identifier  go to state 62


state 47

   33 break_stmt: BREAK .

    $default  reduce using rule 33 (break_stmt)


state 48

   42 expr: TRUE .

    $default  reduce using rule 42 (expr)


state 49

   43 expr: FALSE .

    $default  reduce using rule 43 (expr)


state 50

   60 expr: IDENTIFIER . PAREN_L args_opt PAREN_R
   62 fq_identifier: IDENTIFIER .
   63              | IDENTIFIER . DOT IDENTIFIER

    PAREN_L  shift, and go to state 69
    DOT      shift, and go to state 70

    $default  reduce using rule 62 (fq_identifier)


state 51

   39 expr: STRING_LITERAL .

    $default  reduce using rule 39 (expr)


state 52

   40 expr: DOUBLE_LITERAL .

    $default  reduce using rule 40 (expr)


state 53

   41 expr: CHAR_LITERAL .

    $default  reduce using rule 41 (expr)


state 54

   38 expr: INT_LITERAL .

    $default  reduce using rule 38 (expr)


state 55

   24 stmts: stmts stmt .

    $default  reduce using rule 24 (stmts)


state 56

   26 stmt: return_stmt . SEMI

    SEMI  shift, and go to state 71


state 57

   27 stmt: break_stmt . SEMI

    SEMI  shift, and go to state 72


state 58

   28 stmt: if_stmt .

    $default  reduce using rule 28 (stmt)


state 59

   29 stmt: while_stmt .

    $default  reduce using rule 29 (stmt)


state 60

   30 stmt: for_stmt .

    $default  reduce using rule 30 (stmt)


state 61

   25 stmt: expr . SEMI
   44 expr: expr . PLUS expr
   45     | expr . MINUS expr
   46     | expr . TIMES expr
   47     | expr . DIVIDE expr
   48     | expr . MOD expr
   49     | expr . EQ expr
   50     | expr . NEQ expr
   51     | expr . LT expr
   52     | expr . LEQ expr
   53     | expr . GT expr
   54     | expr . GEQ expr
   55     | expr . AND expr
   56     | expr . OR expr

    SEMI    shift, and go to state 73
    MOD     shift, and go to state 74
    PLUS    shift, and go to state 75
    MINUS   shift, and go to state 76
    TIMES   shift, and go to state 77
    DIVIDE  shift, and go to state 78
    AND     shift, and go to state 79
    OR      shift, and go to state 80
    EQ      shift, and go to state 81
    NEQ     shift, and go to state 82
    LT      shift, and go to state 83
    LEQ     shift, and go to state 84
    GT      shift, and go to state 85
    GEQ     shift, and go to state 86


state 62

   59 expr: fq_identifier . ASSIGN expr
   61     | fq_identifier .

    ASSIGN  shift, and go to state 87

    $default  reduce using rule 61 (expr)


state 63

   44 expr: expr . PLUS expr
   45     | expr . MINUS expr
   46     | expr . TIMES expr
   47     | expr . DIVIDE expr
   48     | expr . MOD expr
   49     | expr . EQ expr
   50     | expr . NEQ expr
   51     | expr . LT expr
   52     | expr . LEQ expr
   53     | expr . GT expr
   54     | expr . GEQ expr
   55     | expr . AND expr
   56     | expr . OR expr
   58     | PAREN_L expr . PAREN_R

    PAREN_R  shift, and go to state 88
    MOD      shift, and go to state 74
    PLUS     shift, and go to state 75
    MINUS    shift, and go to state 76
    TIMES    shift, and go to state 77
    DIVIDE   shift, and go to state 78
    AND      shift, and go to state 79
    OR       shift, and go to state 80
    EQ       shift, and go to state 81
    NEQ      shift, and go to state 82
    LT       shift, and go to state 83
    LEQ      shift, and go to state 84
    GT       shift, and go to state 85
    GEQ      shift, and go to state 86


state 64

   44 expr: expr . PLUS expr
   45     | expr . MINUS expr
   46     | expr . TIMES expr
   47     | expr . DIVIDE expr
   48     | expr . MOD expr
   49     | expr . EQ expr
   50     | expr . NEQ expr
   51     | expr . LT expr
   52     | expr . LEQ expr
   53     | expr . GT expr
   54     | expr . GEQ expr
   55     | expr . AND expr
   56     | expr . OR expr
   57     | NOT expr .

    $default  reduce using rule 57 (expr)


state 65

   34 if_stmt: IF PAREN_L . expr PAREN_R BRACE_L stmts BRACE_R ELSE BRACE_L stmts BRACE_R
   35        | IF PAREN_L . expr PAREN_R BRACE_L stmts BRACE_R

    PAREN_L         shift, and go to state 40
    NOT             shift, and go to state 42
    TRUE            shift, and go to state 48
    FALSE           shift, and go to state 49
    IDENTIFIER      shift, and go to state 50
    STRING_LITERAL  shift, and go to state 51
    DOUBLE_LITERAL  shift, and go to state 52
    CHAR_LITERAL    shift, and go to state 53
    INT_LITERAL     shift, and go to state 54

    expr           go to state 89
    fq_identifier  go to state 62


state 66

   37 for_stmt: FOR PAREN_L . expr SEMI expr SEMI expr PAREN_R BRACE_L stmts BRACE_R

    PAREN_L         shift, and go to state 40
    NOT             shift, and go to state 42
    TRUE            shift, and go to state 48
    FALSE           shift, and go to state 49
    IDENTIFIER      shift, and go to state 50
    STRING_LITERAL  shift, and go to state 51
    DOUBLE_LITERAL  shift, and go to state 52
    CHAR_LITERAL    shift, and go to state 53
    INT_LITERAL     shift, and go to state 54

    expr           go to state 90
    fq_identifier  go to state 62


state 67

   36 while_stmt: WHILE PAREN_L . expr PAREN_R BRACE_L stmts BRACE_R

    PAREN_L         shift, and go to state 40
    NOT             shift, and go to state 42
    TRUE            shift, and go to state 48
    FALSE           shift, and go to state 49
    IDENTIFIER      shift, and go to state 50
    STRING_LITERAL  shift, and go to state 51
    DOUBLE_LITERAL  shift, and go to state 52
    CHAR_LITERAL    shift, and go to state 53
    INT_LITERAL     shift, and go to state 54

    expr           go to state 91
    fq_identifier  go to state 62


state 68

   31 return_stmt: RETURN expr .
   44 expr: expr . PLUS expr
   45     | expr . MINUS expr
   46     | expr . TIMES expr
   47     | expr . DIVIDE expr
   48     | expr . MOD expr
   49     | expr . EQ expr
   50     | expr . NEQ expr
   51     | expr . LT expr
   52     | expr . LEQ expr
   53     | expr . GT expr
   54     | expr . GEQ expr
   55     | expr . AND expr
   56     | expr . OR expr

    MOD     shift, and go to state 74
    PLUS    shift, and go to state 75
    MINUS   shift, and go to state 76
    TIMES   shift, and go to state 77
    DIVIDE  shift, and go to state 78
    AND     shift, and go to state 79
    OR      shift, and go to state 80
    EQ      shift, and go to state 81
    NEQ     shift, and go to state 82
    LT      shift, and go to state 83
    LEQ     shift, and go to state 84
    GT      shift, and go to state 85
    GEQ     shift, and go to state 86

    $default  reduce using rule 31 (return_stmt)


state 69

   60 expr: IDENTIFIER PAREN_L . args_opt PAREN_R

    PAREN_L         shift, and go to state 40
    NOT             shift, and go to state 42
    TRUE            shift, and go to state 48
    FALSE           shift, and go to state 49
    IDENTIFIER      shift, and go to state 50
    STRING_LITERAL  shift, and go to state 51
    DOUBLE_LITERAL  shift, and go to state 52
    CHAR_LITERAL    shift, and go to state 53
    INT_LITERAL     shift, and go to state 54

    $default  reduce using rule 64 (args_opt)

    expr           go to state 92
    fq_identifier  go to state 62
    args_opt       go to state 93
    args_list      go to state 94


state 70

   63 fq_identifier: IDENTIFIER DOT . IDENTIFIER

    IDENTIFIER  shift, and go to state 95


state 71

   26 stmt: return_stmt SEMI .

    $default  reduce using rule 26 (stmt)


state 72

   27 stmt: break_stmt SEMI .

    $default  reduce using rule 27 (stmt)


state 73

   25 stmt: expr SEMI .

    $default  reduce using rule 25 (stmt)


state 74

   48 expr: expr MOD . expr

    PAREN_L         shift, and go to state 40
    NOT             shift, and go to state 42
    TRUE            shift, and go to state 48
    FALSE           shift, and go to state 49
    IDENTIFIER      shift, and go to state 50
    STRING_LITERAL  shift, and go to state 51
    DOUBLE_LITERAL  shift, and go to state 52
    CHAR_LITERAL    shift, and go to state 53
    INT_LITERAL     shift, and go to state 54

    expr           go to state 96
    fq_identifier  go to state 62


state 75

   44 expr: expr PLUS . expr

    PAREN_L         shift, and go to state 40
    NOT             shift, and go to state 42
    TRUE            shift, and go to state 48
    FALSE           shift, and go to state 49
    IDENTIFIER      shift, and go to state 50
    STRING_LITERAL  shift, and go to state 51
    DOUBLE_LITERAL  shift, and go to state 52
    CHAR_LITERAL    shift, and go to state 53
    INT_LITERAL     shift, and go to state 54

    expr           go to state 97
    fq_identifier  go to state 62


state 76

   45 expr: expr MINUS . expr

    PAREN_L         shift, and go to state 40
    NOT             shift, and go to state 42
    TRUE            shift, and go to state 48
    FALSE           shift, and go to state 49
    IDENTIFIER      shift, and go to state 50
    STRING_LITERAL  shift, and go to state 51
    DOUBLE_LITERAL  shift, and go to state 52
    CHAR_LITERAL    shift, and go to state 53
    INT_LITERAL     shift, and go to state 54

    expr           go to state 98
    fq_identifier  go to state 62


state 77

   46 expr: expr TIMES . expr

    PAREN_L         shift, and go to state 40
    NOT             shift, and go to state 42
    TRUE            shift, and go to state 48
    FALSE           shift, and go to state 49
    IDENTIFIER      shift, and go to state 50
    STRING_LITERAL  shift, and go to state 51
    DOUBLE_LITERAL  shift, and go to state 52
    CHAR_LITERAL    shift, and go to state 53
    INT_LITERAL     shift, and go to state 54

    expr           go to state 99
    fq_identifier  go to state 62


state 78

   47 expr: expr DIVIDE . expr

    PAREN_L         shift, and go to state 40
    NOT             shift, and go to state 42
    TRUE            shift, and go to state 48
    FALSE           shift, and go to state 49
    IDENTIFIER      shift, and go to state 50
    STRING_LITERAL  shift, and go to state 51
    DOUBLE_LITERAL  shift, and go to state 52
    CHAR_LITERAL    shift, and go to state 53
    INT_LITERAL     shift, and go to state 54

    expr           go to state 100
    fq_identifier  go to state 62


state 79

   55 expr: expr AND . expr

    PAREN_L         shift, and go to state 40
    NOT             shift, and go to state 42
    TRUE            shift, and go to state 48
    FALSE           shift, and go to state 49
    IDENTIFIER      shift, and go to state 50
    STRING_LITERAL  shift, and go to state 51
    DOUBLE_LITERAL  shift, and go to state 52
    CHAR_LITERAL    shift, and go to state 53
    INT_LITERAL     shift, and go to state 54

    expr           go to state 101
    fq_identifier  go to state 62


state 80

   56 expr: expr OR . expr

    PAREN_L         shift, and go to state 40
    NOT             shift, and go to state 42
    TRUE            shift, and go to state 48
    FALSE           shift, and go to state 49
    IDENTIFIER      shift, and go to state 50
    STRING_LITERAL  shift, and go to state 51
    DOUBLE_LITERAL  shift, and go to state 52
    CHAR_LITERAL    shift, and go to state 53
    INT_LITERAL     shift, and go to state 54

    expr           go to state 102
    fq_identifier  go to state 62


state 81

   49 expr: expr EQ . expr

    PAREN_L         shift, and go to state 40
    NOT             shift, and go to state 42
    TRUE            shift, and go to state 48
    FALSE           shift, and go to state 49
    IDENTIFIER      shift, and go to state 50
    STRING_LITERAL  shift, and go to state 51
    DOUBLE_LITERAL  shift, and go to state 52
    CHAR_LITERAL    shift, and go to state 53
    INT_LITERAL     shift, and go to state 54

    expr           go to state 103
    fq_identifier  go to state 62


state 82

   50 expr: expr NEQ . expr

    PAREN_L         shift, and go to state 40
    NOT             shift, and go to state 42
    TRUE            shift, and go to state 48
    FALSE           shift, and go to state 49
    IDENTIFIER      shift, and go to state 50
    STRING_LITERAL  shift, and go to state 51
    DOUBLE_LITERAL  shift, and go to state 52
    CHAR_LITERAL    shift, and go to state 53
    INT_LITERAL     shift, and go to state 54

    expr           go to state 104
    fq_identifier  go to state 62


state 83

   51 expr: expr LT . expr

    PAREN_L         shift, and go to state 40
    NOT             shift, and go to state 42
    TRUE            shift, and go to state 48
    FALSE           shift, and go to state 49
    IDENTIFIER      shift, and go to state 50
    STRING_LITERAL  shift, and go to state 51
    DOUBLE_LITERAL  shift, and go to state 52
    CHAR_LITERAL    shift, and go to state 53
    INT_LITERAL     shift, and go to state 54

    expr           go to state 105
    fq_identifier  go to state 62


state 84

   52 expr: expr LEQ . expr

    PAREN_L         shift, and go to state 40
    NOT             shift, and go to state 42
    TRUE            shift, and go to state 48
    FALSE           shift, and go to state 49
    IDENTIFIER      shift, and go to state 50
    STRING_LITERAL  shift, and go to state 51
    DOUBLE_LITERAL  shift, and go to state 52
    CHAR_LITERAL    shift, and go to state 53
    INT_LITERAL     shift, and go to state 54

    expr           go to state 106
    fq_identifier  go to state 62


state 85

   53 expr: expr GT . expr

    PAREN_L         shift, and go to state 40
    NOT             shift, and go to state 42
    TRUE            shift, and go to state 48
    FALSE           shift, and go to state 49
    IDENTIFIER      shift, and go to state 50
    STRING_LITERAL  shift, and go to state 51
    DOUBLE_LITERAL  shift, and go to state 52
    CHAR_LITERAL    shift, and go to state 53
    INT_LITERAL     shift, and go to state 54

    expr           go to state 107
    fq_identifier  go to state 62


state 86

   54 expr: expr GEQ . expr

    PAREN_L         shift, and go to state 40
    NOT             shift, and go to state 42
    TRUE            shift, and go to state 48
    FALSE           shift, and go to state 49
    IDENTIFIER      shift, and go to state 50
    STRING_LITERAL  shift, and go to state 51
    DOUBLE_LITERAL  shift, and go to state 52
    CHAR_LITERAL    shift, and go to state 53
    INT_LITERAL     shift, and go to state 54

    expr           go to state 108
    fq_identifier  go to state 62


state 87

   59 expr: fq_identifier ASSIGN . expr

    PAREN_L         shift, and go to state 40
    NOT             shift, and go to state 42
    TRUE            shift, and go to state 48
    FALSE           shift, and go to state 49
    IDENTIFIER      shift, and go to state 50
    STRING_LITERAL  shift, and go to state 51
    DOUBLE_LITERAL  shift, and go to state 52
    CHAR_LITERAL    shift, and go to state 53
    INT_LITERAL     shift, and go to state 54

    expr           go to state 109
    fq_identifier  go to state 62


state 88

   58 expr: PAREN_L expr PAREN_R .

    $default  reduce using rule 58 (expr)


state 89

   34 if_stmt: IF PAREN_L expr . PAREN_R BRACE_L stmts BRACE_R ELSE BRACE_L stmts BRACE_R
   35        | IF PAREN_L expr . PAREN_R BRACE_L stmts BRACE_R
   44 expr: expr . PLUS expr
   45     | expr . MINUS expr
   46     | expr . TIMES expr
   47     | expr . DIVIDE expr
   48     | expr . MOD expr
   49     | expr . EQ expr
   50     | expr . NEQ expr
   51     | expr . LT expr
   52     | expr . LEQ expr
   53     | expr . GT expr
   54     | expr . GEQ expr
   55     | expr . AND expr
   56     | expr . OR expr

    PAREN_R  shift, and go to state 110
    MOD      shift, and go to state 74
    PLUS     shift, and go to state 75
    MINUS    shift, and go to state 76
    TIMES    shift, and go to state 77
    DIVIDE   shift, and go to state 78
    AND      shift, and go to state 79
    OR       shift, and go to state 80
    EQ       shift, and go to state 81
    NEQ      shift, and go to state 82
    LT       shift, and go to state 83
    LEQ      shift, and go to state 84
    GT       shift, and go to state 85
    GEQ      shift, and go to state 86


state 90

   37 for_stmt: FOR PAREN_L expr . SEMI expr SEMI expr PAREN_R BRACE_L stmts BRACE_R
   44 expr: expr . PLUS expr
   45     | expr . MINUS expr
   46     | expr . TIMES expr
   47     | expr . DIVIDE expr
   48     | expr . MOD expr
   49     | expr . EQ expr
   50     | expr . NEQ expr
   51     | expr . LT expr
   52     | expr . LEQ expr
   53     | expr . GT expr
   54     | expr . GEQ expr
   55     | expr . AND expr
   56     | expr . OR expr

    SEMI    shift, and go to state 111
    MOD     shift, and go to state 74
    PLUS    shift, and go to state 75
    MINUS   shift, and go to state 76
    TIMES   shift, and go to state 77
    DIVIDE  shift, and go to state 78
    AND     shift, and go to state 79
    OR      shift, and go to state 80
    EQ      shift, and go to state 81
    NEQ     shift, and go to state 82
    LT      shift, and go to state 83
    LEQ     shift, and go to state 84
    GT      shift, and go to state 85
    GEQ     shift, and go to state 86


state 91

   36 while_stmt: WHILE PAREN_L expr . PAREN_R BRACE_L stmts BRACE_R
   44 expr: expr . PLUS expr
   45     | expr . MINUS expr
   46     | expr . TIMES expr
   47     | expr . DIVIDE expr
   48     | expr . MOD expr
   49     | expr . EQ expr
   50     | expr . NEQ expr
   51     | expr . LT expr
   52     | expr . LEQ expr
   53     | expr . GT expr
   54     | expr . GEQ expr
   55     | expr . AND expr
   56     | expr . OR expr

    PAREN_R  shift, and go to state 112
    MOD      shift, and go to state 74
    PLUS     shift, and go to state 75
    MINUS    shift, and go to state 76
    TIMES    shift, and go to state 77
    DIVIDE   shift, and go to state 78
    AND      shift, and go to state 79
    OR       shift, and go to state 80
    EQ       shift, and go to state 81
    NEQ      shift, and go to state 82
    LT       shift, and go to state 83
    LEQ      shift, and go to state 84
    GT       shift, and go to state 85
    GEQ      shift, and go to state 86


state 92

   44 expr: expr . PLUS expr
   45     | expr . MINUS expr
   46     | expr . TIMES expr
   47     | expr . DIVIDE expr
   48     | expr . MOD expr
   49     | expr . EQ expr
   50     | expr . NEQ expr
   51     | expr . LT expr
   52     | expr . LEQ expr
   53     | expr . GT expr
   54     | expr . GEQ expr
   55     | expr . AND expr
   56     | expr . OR expr
   66 args_list: expr .

    MOD     shift, and go to state 74
    PLUS    shift, and go to state 75
    MINUS   shift, and go to state 76
    TIMES   shift, and go to state 77
    DIVIDE  shift, and go to state 78
    AND     shift, and go to state 79
    OR      shift, and go to state 80
    EQ      shift, and go to state 81
    NEQ     shift, and go to state 82
    LT      shift, and go to state 83
    LEQ     shift, and go to state 84
    GT      shift, and go to state 85
    GEQ     shift, and go to state 86

    $default  reduce using rule 66 (args_list)


state 93

   60 expr: IDENTIFIER PAREN_L args_opt . PAREN_R

    PAREN_R  shift, and go to state 113


state 94

   65 args_opt: args_list .
   67 args_list: args_list . COMMA expr

    COMMA  shift, and go to state 114

    $default  reduce using rule 65 (args_opt)


state 95

   63 fq_identifier: IDENTIFIER DOT IDENTIFIER .

    $default  reduce using rule 63 (fq_identifier)


state 96

   44 expr: expr . PLUS expr
   45     | expr . MINUS expr
   46     | expr . TIMES expr
   47     | expr . DIVIDE expr
   48     | expr . MOD expr
   48     | expr MOD expr .
   49     | expr . EQ expr
   50     | expr . NEQ expr
   51     | expr . LT expr
   52     | expr . LEQ expr
   53     | expr . GT expr
   54     | expr . GEQ expr
   55     | expr . AND expr
   56     | expr . OR expr

    $default  reduce using rule 48 (expr)


state 97

   44 expr: expr . PLUS expr
   44     | expr PLUS expr .
   45     | expr . MINUS expr
   46     | expr . TIMES expr
   47     | expr . DIVIDE expr
   48     | expr . MOD expr
   49     | expr . EQ expr
   50     | expr . NEQ expr
   51     | expr . LT expr
   52     | expr . LEQ expr
   53     | expr . GT expr
   54     | expr . GEQ expr
   55     | expr . AND expr
   56     | expr . OR expr

    MOD     shift, and go to state 74
    TIMES   shift, and go to state 77
    DIVIDE  shift, and go to state 78

    $default  reduce using rule 44 (expr)


state 98

   44 expr: expr . PLUS expr
   45     | expr . MINUS expr
   45     | expr MINUS expr .
   46     | expr . TIMES expr
   47     | expr . DIVIDE expr
   48     | expr . MOD expr
   49     | expr . EQ expr
   50     | expr . NEQ expr
   51     | expr . LT expr
   52     | expr . LEQ expr
   53     | expr . GT expr
   54     | expr . GEQ expr
   55     | expr . AND expr
   56     | expr . OR expr

    MOD     shift, and go to state 74
    TIMES   shift, and go to state 77
    DIVIDE  shift, and go to state 78

    $default  reduce using rule 45 (expr)


state 99

   44 expr: expr . PLUS expr
   45     | expr . MINUS expr
   46     | expr . TIMES expr
   46     | expr TIMES expr .
   47     | expr . DIVIDE expr
   48     | expr . MOD expr
   49     | expr . EQ expr
   50     | expr . NEQ expr
   51     | expr . LT expr
   52     | expr . LEQ expr
   53     | expr . GT expr
   54     | expr . GEQ expr
   55     | expr . AND expr
   56     | expr . OR expr

    $default  reduce using rule 46 (expr)


state 100

   44 expr: expr . PLUS expr
   45     | expr . MINUS expr
   46     | expr . TIMES expr
   47     | expr . DIVIDE expr
   47     | expr DIVIDE expr .
   48     | expr . MOD expr
   49     | expr . EQ expr
   50     | expr . NEQ expr
   51     | expr . LT expr
   52     | expr . LEQ expr
   53     | expr . GT expr
   54     | expr . GEQ expr
   55     | expr . AND expr
   56     | expr . OR expr

    $default  reduce using rule 47 (expr)


state 101

   44 expr: expr . PLUS expr
   45     | expr . MINUS expr
   46     | expr . TIMES expr
   47     | expr . DIVIDE expr
   48     | expr . MOD expr
   49     | expr . EQ expr
   50     | expr . NEQ expr
   51     | expr . LT expr
   52     | expr . LEQ expr
   53     | expr . GT expr
   54     | expr . GEQ expr
   55     | expr . AND expr
   55     | expr AND expr .
   56     | expr . OR expr

    MOD     shift, and go to state 74
    PLUS    shift, and go to state 75
    MINUS   shift, and go to state 76
    TIMES   shift, and go to state 77
    DIVIDE  shift, and go to state 78
    EQ      shift, and go to state 81
    NEQ     shift, and go to state 82
    LT      shift, and go to state 83
    LEQ     shift, and go to state 84
    GT      shift, and go to state 85
    GEQ     shift, and go to state 86

    $default  reduce using rule 55 (expr)


state 102

   44 expr: expr . PLUS expr
   45     | expr . MINUS expr
   46     | expr . TIMES expr
   47     | expr . DIVIDE expr
   48     | expr . MOD expr
   49     | expr . EQ expr
   50     | expr . NEQ expr
   51     | expr . LT expr
   52     | expr . LEQ expr
   53     | expr . GT expr
   54     | expr . GEQ expr
   55     | expr . AND expr
   56     | expr . OR expr
   56     | expr OR expr .

    MOD     shift, and go to state 74
    PLUS    shift, and go to state 75
    MINUS   shift, and go to state 76
    TIMES   shift, and go to state 77
    DIVIDE  shift, and go to state 78
    AND     shift, and go to state 79
    EQ      shift, and go to state 81
    NEQ     shift, and go to state 82
    LT      shift, and go to state 83
    LEQ     shift, and go to state 84
    GT      shift, and go to state 85
    GEQ     shift, and go to state 86

    $default  reduce using rule 56 (expr)


state 103

   44 expr: expr . PLUS expr
   45     | expr . MINUS expr
   46     | expr . TIMES expr
   47     | expr . DIVIDE expr
   48     | expr . MOD expr
   49     | expr . EQ expr
   49     | expr EQ expr .
   50     | expr . NEQ expr
   51     | expr . LT expr
   52     | expr . LEQ expr
   53     | expr . GT expr
   54     | expr . GEQ expr
   55     | expr . AND expr
   56     | expr . OR expr

    MOD     shift, and go to state 74
    PLUS    shift, and go to state 75
    MINUS   shift, and go to state 76
    TIMES   shift, and go to state 77
    DIVIDE  shift, and go to state 78
    LT      shift, and go to state 83
    LEQ     shift, and go to state 84
    GT      shift, and go to state 85
    GEQ     shift, and go to state 86

    $default  reduce using rule 49 (expr)


state 104

   44 expr: expr . PLUS expr
   45     | expr . MINUS expr
   46     | expr . TIMES expr
   47     | expr . DIVIDE expr
   48     | expr . MOD expr
   49     | expr . EQ expr
   50     | expr . NEQ expr
   50     | expr NEQ expr .
   51     | expr . LT expr
   52     | expr . LEQ expr
   53     | expr . GT expr
   54     | expr . GEQ expr
   55     | expr . AND expr
   56     | expr . OR expr

    MOD     shift, and go to state 74
    PLUS    shift, and go to state 75
    MINUS   shift, and go to state 76
    TIMES   shift, and go to state 77
    DIVIDE  shift, and go to state 78
    LT      shift, and go to state 83
    LEQ     shift, and go to state 84
    GT      shift, and go to state 85
    GEQ     shift, and go to state 86

    $default  reduce using rule 50 (expr)


state 105

   44 expr: expr . PLUS expr
   45     | expr . MINUS expr
   46     | expr . TIMES expr
   47     | expr . DIVIDE expr
   48     | expr . MOD expr
   49     | expr . EQ expr
   50     | expr . NEQ expr
   51     | expr . LT expr
   51     | expr LT expr .
   52     | expr . LEQ expr
   53     | expr . GT expr
   54     | expr . GEQ expr
   55     | expr . AND expr
   56     | expr . OR expr

    MOD     shift, and go to state 74
    PLUS    shift, and go to state 75
    MINUS   shift, and go to state 76
    TIMES   shift, and go to state 77
    DIVIDE  shift, and go to state 78

    $default  reduce using rule 51 (expr)


state 106

   44 expr: expr . PLUS expr
   45     | expr . MINUS expr
   46     | expr . TIMES expr
   47     | expr . DIVIDE expr
   48     | expr . MOD expr
   49     | expr . EQ expr
   50     | expr . NEQ expr
   51     | expr . LT expr
   52     | expr . LEQ expr
   52     | expr LEQ expr .
   53     | expr . GT expr
   54     | expr . GEQ expr
   55     | expr . AND expr
   56     | expr . OR expr

    MOD     shift, and go to state 74
    PLUS    shift, and go to state 75
    MINUS   shift, and go to state 76
    TIMES   shift, and go to state 77
    DIVIDE  shift, and go to state 78

    $default  reduce using rule 52 (expr)


state 107

   44 expr: expr . PLUS expr
   45     | expr . MINUS expr
   46     | expr . TIMES expr
   47     | expr . DIVIDE expr
   48     | expr . MOD expr
   49     | expr . EQ expr
   50     | expr . NEQ expr
   51     | expr . LT expr
   52     | expr . LEQ expr
   53     | expr . GT expr
   53     | expr GT expr .
   54     | expr . GEQ expr
   55     | expr . AND expr
   56     | expr . OR expr

    MOD     shift, and go to state 74
    PLUS    shift, and go to state 75
    MINUS   shift, and go to state 76
    TIMES   shift, and go to state 77
    DIVIDE  shift, and go to state 78

    $default  reduce using rule 53 (expr)


state 108

   44 expr: expr . PLUS expr
   45     | expr . MINUS expr
   46     | expr . TIMES expr
   47     | expr . DIVIDE expr
   48     | expr . MOD expr
   49     | expr . EQ expr
   50     | expr . NEQ expr
   51     | expr . LT expr
   52     | expr . LEQ expr
   53     | expr . GT expr
   54     | expr . GEQ expr
   54     | expr GEQ expr .
   55     | expr . AND expr
   56     | expr . OR expr

    MOD     shift, and go to state 74
    PLUS    shift, and go to state 75
    MINUS   shift, and go to state 76
    TIMES   shift, and go to state 77
    DIVIDE  shift, and go to state 78

    $default  reduce using rule 54 (expr)


state 109

   44 expr: expr . PLUS expr
   45     | expr . MINUS expr
   46     | expr . TIMES expr
   47     | expr . DIVIDE expr
   48     | expr . MOD expr
   49     | expr . EQ expr
   50     | expr . NEQ expr
   51     | expr . LT expr
   52     | expr . LEQ expr
   53     | expr . GT expr
   54     | expr . GEQ expr
   55     | expr . AND expr
   56     | expr . OR expr
   59     | fq_identifier ASSIGN expr .

    MOD     shift, and go to state 74
    PLUS    shift, and go to state 75
    MINUS   shift, and go to state 76
    TIMES   shift, and go to state 77
    DIVIDE  shift, and go to state 78
    AND     shift, and go to state 79
    OR      shift, and go to state 80
    EQ      shift, and go to state 81
    NEQ     shift, and go to state 82
    LT      shift, and go to state 83
    LEQ     shift, and go to state 84
    GT      shift, and go to state 85
    GEQ     shift, and go to state 86

    $default  reduce using rule 59 (expr)


state 110

   34 if_stmt: IF PAREN_L expr PAREN_R . BRACE_L stmts BRACE_R ELSE BRACE_L stmts BRACE_R
   35        | IF PAREN_L expr PAREN_R . BRACE_L stmts BRACE_R

    BRACE_L  shift, and go to state 115


state 111

   37 for_stmt: FOR PAREN_L expr SEMI . expr SEMI expr PAREN_R BRACE_L stmts BRACE_R

    PAREN_L         shift, and go to state 40
    NOT             shift, and go to state 42
    TRUE            shift, and go to state 48
    FALSE           shift, and go to state 49
    IDENTIFIER      shift, and go to state 50
    STRING_LITERAL  shift, and go to state 51
    DOUBLE_LITERAL  shift, and go to state 52
    CHAR_LITERAL    shift, and go to state 53
    INT_LITERAL     shift, and go to state 54

    expr           go to state 116
    fq_identifier  go to state 62


state 112

   36 while_stmt: WHILE PAREN_L expr PAREN_R . BRACE_L stmts BRACE_R

    BRACE_L  shift, and go to state 117


state 113

   60 expr: IDENTIFIER PAREN_L args_opt PAREN_R .

    $default  reduce using rule 60 (expr)


state 114

   67 args_list: args_list COMMA . expr

    PAREN_L         shift, and go to state 40
    NOT             shift, and go to state 42
    TRUE            shift, and go to state 48
    FALSE           shift, and go to state 49
    IDENTIFIER      shift, and go to state 50
    STRING_LITERAL  shift, and go to state 51
    DOUBLE_LITERAL  shift, and go to state 52
    CHAR_LITERAL    shift, and go to state 53
    INT_LITERAL     shift, and go to state 54

    expr           go to state 118
    fq_identifier  go to state 62


state 115

   34 if_stmt: IF PAREN_L expr PAREN_R BRACE_L . stmts BRACE_R ELSE BRACE_L stmts BRACE_R
   35        | IF PAREN_L expr PAREN_R BRACE_L . stmts BRACE_R

    $default  reduce using rule 23 (stmts)

    stmts  go to state 119


state 116

   37 for_stmt: FOR PAREN_L expr SEMI expr . SEMI expr PAREN_R BRACE_L stmts BRACE_R
   44 expr: expr . PLUS expr
   45     | expr . MINUS expr
   46     | expr . TIMES expr
   47     | expr . DIVIDE expr
   48     | expr . MOD expr
   49     | expr . EQ expr
   50     | expr . NEQ expr
   51     | expr . LT expr
   52     | expr . LEQ expr
   53     | expr . GT expr
   54     | expr . GEQ expr
   55     | expr . AND expr
   56     | expr . OR expr

    SEMI    shift, and go to state 120
    MOD     shift, and go to state 74
    PLUS    shift, and go to state 75
    MINUS   shift, and go to state 76
    TIMES   shift, and go to state 77
    DIVIDE  shift, and go to state 78
    AND     shift, and go to state 79
    OR      shift, and go to state 80
    EQ      shift, and go to state 81
    NEQ     shift, and go to state 82
    LT      shift, and go to state 83
    LEQ     shift, and go to state 84
    GT      shift, and go to state 85
    GEQ     shift, and go to state 86


state 117

   36 while_stmt: WHILE PAREN_L expr PAREN_R BRACE_L . stmts BRACE_R

    $default  reduce using rule 23 (stmts)

    stmts  go to state 121


state 118

   44 expr: expr . PLUS expr
   45     | expr . MINUS expr
   46     | expr . TIMES expr
   47     | expr . DIVIDE expr
   48     | expr . MOD expr
   49     | expr . EQ expr
   50     | expr . NEQ expr
   51     | expr . LT expr
   52     | expr . LEQ expr
   53     | expr . GT expr
   54     | expr . GEQ expr
   55     | expr . AND expr
   56     | expr . OR expr
   67 args_list: args_list COMMA expr .

    MOD     shift, and go to state 74
    PLUS    shift, and go to state 75
    MINUS   shift, and go to state 76
    TIMES   shift, and go to state 77
    DIVIDE  shift, and go to state 78
    AND     shift, and go to state 79
    OR      shift, and go to state 80
    EQ      shift, and go to state 81
    NEQ     shift, and go to state 82
    LT      shift, and go to state 83
    LEQ     shift, and go to state 84
    GT      shift, and go to state 85
    GEQ     shift, and go to state 86

    $default  reduce using rule 67 (args_list)


state 119

   24 stmts: stmts . stmt
   34 if_stmt: IF PAREN_L expr PAREN_R BRACE_L stmts . BRACE_R ELSE BRACE_L stmts BRACE_R
   35        | IF PAREN_L expr PAREN_R BRACE_L stmts . BRACE_R

    PAREN_L         shift, and go to state 40
    BRACE_R         shift, and go to state 122
    NOT             shift, and go to state 42
    IF              shift, and go to state 43
    FOR             shift, and go to state 44
    WHILE           shift, and go to state 45
    RETURN          shift, and go to state 46
    BREAK           shift, and go to state 47
    TRUE            shift, and go to state 48
    FALSE           shift, and go to state 49
    IDENTIFIER      shift, and go to state 50
    STRING_LITERAL  shift, and go to state 51
    DOUBLE_LITERAL  shift, and go to state 52
    CHAR_LITERAL    shift, and go to state 53
    INT_LITERAL     shift, and go to state 54

    stmt           go to state 55
    return_stmt    go to state 56
    break_stmt     go to state 57
    if_stmt        go to state 58
    while_stmt     go to state 59
    for_stmt       go to state 60
    expr           go to state 61
    fq_identifier  go to state 62


state 120

   37 for_stmt: FOR PAREN_L expr SEMI expr SEMI . expr PAREN_R BRACE_L stmts BRACE_R

    PAREN_L         shift, and go to state 40
    NOT             shift, and go to state 42
    TRUE            shift, and go to state 48
    FALSE           shift, and go to state 49
    IDENTIFIER      shift, and go to state 50
    STRING_LITERAL  shift, and go to state 51
    DOUBLE_LITERAL  shift, and go to state 52
    CHAR_LITERAL    shift, and go to state 53
    INT_LITERAL     shift, and go to state 54

    expr           go to state 123
    fq_identifier  go to state 62


state 121

   24 stmts: stmts . stmt
   36 while_stmt: WHILE PAREN_L expr PAREN_R BRACE_L stmts . BRACE_R

    PAREN_L         shift, and go to state 40
    BRACE_R         shift, and go to state 124
    NOT             shift, and go to state 42
    IF              shift, and go to state 43
    FOR             shift, and go to state 44
    WHILE           shift, and go to state 45
    RETURN          shift, and go to state 46
    BREAK           shift, and go to state 47
    TRUE            shift, and go to state 48
    FALSE           shift, and go to state 49
    IDENTIFIER      shift, and go to state 50
    STRING_LITERAL  shift, and go to state 51
    DOUBLE_LITERAL  shift, and go to state 52
    CHAR_LITERAL    shift, and go to state 53
    INT_LITERAL     shift, and go to state 54

    stmt           go to state 55
    return_stmt    go to state 56
    break_stmt     go to state 57
    if_stmt        go to state 58
    while_stmt     go to state 59
    for_stmt       go to state 60
    expr           go to state 61
    fq_identifier  go to state 62


state 122

   34 if_stmt: IF PAREN_L expr PAREN_R BRACE_L stmts BRACE_R . ELSE BRACE_L stmts BRACE_R
   35        | IF PAREN_L expr PAREN_R BRACE_L stmts BRACE_R .

    ELSE  shift, and go to state 125

    $default  reduce using rule 35 (if_stmt)


state 123

   37 for_stmt: FOR PAREN_L expr SEMI expr SEMI expr . PAREN_R BRACE_L stmts BRACE_R
   44 expr: expr . PLUS expr
   45     | expr . MINUS expr
   46     | expr . TIMES expr
   47     | expr . DIVIDE expr
   48     | expr . MOD expr
   49     | expr . EQ expr
   50     | expr . NEQ expr
   51     | expr . LT expr
   52     | expr . LEQ expr
   53     | expr . GT expr
   54     | expr . GEQ expr
   55     | expr . AND expr
   56     | expr . OR expr

    PAREN_R  shift, and go to state 126
    MOD      shift, and go to state 74
    PLUS     shift, and go to state 75
    MINUS    shift, and go to state 76
    TIMES    shift, and go to state 77
    DIVIDE   shift, and go to state 78
    AND      shift, and go to state 79
    OR       shift, and go to state 80
    EQ       shift, and go to state 81
    NEQ      shift, and go to state 82
    LT       shift, and go to state 83
    LEQ      shift, and go to state 84
    GT       shift, and go to state 85
    GEQ      shift, and go to state 86


state 124

   36 while_stmt: WHILE PAREN_L expr PAREN_R BRACE_L stmts BRACE_R .

    $default  reduce using rule 36 (while_stmt)


state 125

   34 if_stmt: IF PAREN_L expr PAREN_R BRACE_L stmts BRACE_R ELSE . BRACE_L stmts BRACE_R

    BRACE_L  shift, and go to state 127


state 126

   37 for_stmt: FOR PAREN_L expr SEMI expr SEMI expr PAREN_R . BRACE_L stmts BRACE_R

    BRACE_L  shift, and go to state 128


state 127

   34 if_stmt: IF PAREN_L expr PAREN_R BRACE_L stmts BRACE_R ELSE BRACE_L . stmts BRACE_R

    $default  reduce using rule 23 (stmts)

    stmts  go to state 129


state 128

   37 for_stmt: FOR PAREN_L expr SEMI expr SEMI expr PAREN_R BRACE_L . stmts BRACE_R

    $default  reduce using rule 23 (stmts)

    stmts  go to state 130


state 129

   24 stmts: stmts . stmt
   34 if_stmt: IF PAREN_L expr PAREN_R BRACE_L stmts BRACE_R ELSE BRACE_L stmts . BRACE_R

    PAREN_L         shift, and go to state 40
    BRACE_R         shift, and go to state 131
    NOT             shift, and go to state 42
    IF              shift, and go to state 43
    FOR             shift, and go to state 44
    WHILE           shift, and go to state 45
    RETURN          shift, and go to state 46
    BREAK           shift, and go to state 47
    TRUE            shift, and go to state 48
    FALSE           shift, and go to state 49
    IDENTIFIER      shift, and go to state 50
    STRING_LITERAL  shift, and go to state 51
    DOUBLE_LITERAL  shift, and go to state 52
    CHAR_LITERAL    shift, and go to state 53
    INT_LITERAL     shift, and go to state 54

    stmt           go to state 55
    return_stmt    go to state 56
    break_stmt     go to state 57
    if_stmt        go to state 58
    while_stmt     go to state 59
    for_stmt       go to state 60
    expr           go to state 61
    fq_identifier  go to state 62


state 130

   24 stmts: stmts . stmt
   37 for_stmt: FOR PAREN_L expr SEMI expr SEMI expr PAREN_R BRACE_L stmts . BRACE_R

    PAREN_L         shift, and go to state 40
    BRACE_R         shift, and go to state 132
    NOT             shift, and go to state 42
    IF              shift, and go to state 43
    FOR             shift, and go to state 44
    WHILE           shift, and go to state 45
    RETURN          shift, and go to state 46
    BREAK           shift, and go to state 47
    TRUE            shift, and go to state 48
    FALSE           shift, and go to state 49
    IDENTIFIER      shift, and go to state 50
    STRING_LITERAL  shift, and go to state 51
    DOUBLE_LITERAL  shift, and go to state 52
    CHAR_LITERAL    shift, and go to state 53
    INT_LITERAL     shift, and go to state 54

    stmt           go to state 55
    return_stmt    go to state 56
    break_stmt     go to state 57
    if_stmt        go to state 58
    while_stmt     go to state 59
    for_stmt       go to state 60
    expr           go to state 61
    fq_identifier  go to state 62


state 131

   34 if_stmt: IF PAREN_L expr PAREN_R BRACE_L stmts BRACE_R ELSE BRACE_L stmts BRACE_R .

    $default  reduce using rule 34 (if_stmt)


state 132

   37 for_stmt: FOR PAREN_L expr SEMI expr SEMI expr PAREN_R BRACE_L stmts BRACE_R .

    $default  reduce using rule 37 (for_stmt)
